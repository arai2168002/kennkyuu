αの式の段階で不等式での求め方を書いたほうが良い

デッドラインミスをするものも考えないといけない
↓
次異才の手法では途中でLLFに切り替わるからデッドラインミスをする場合のも考慮して
最善な可能性もあるから計算しないといけない

　　一般化

☆次々状態までのメモリ消費量が最も小さくなるαの範囲を求める
　　　　　　　　　　　　　　↓
プログラム上では人間みたいになんとなくではなく最後まで計算しないといけないから

時刻tは全体の時間

選択したタスクの次状態がマイナス値となる場合無条件でそのタスクを選択

質問
・


時間だけで考えたときに悪くなるようなものの例を作らないといけない