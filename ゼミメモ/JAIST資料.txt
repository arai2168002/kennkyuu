我々の研究の概要は以下の通りです．（お役に立てるかはわかりませんが）

・マルチプロセッサ or マルチコアを対象
・タスク（プロセス）が複数存在し，各タスクにはデッドライン（締切時刻）がある
・目的：全てタスクをいずれかのプロセッサ／コアに割り当てて実行する
・利点その１：全タスクのプロセッサ使用率の合計が　100%×コア数　を超えなければ，
　全てのタスクのデッドラインが守れることが保証される．
　（ただし，この利点を持つスケジューリング法は他にも存在する）
・利点その２：マイグレーション（タスク実行の途中で，そのタスクが別のコアに移動すること）と，
　プリエンプション（タスク実行が途中で，別のタスクに割り込まれて中断すること）
　の回数が，既存の優れている（と言われている）方法と同程度に少ない．
・利点その３：OSによるスケジューリングの計算量が既存の方法よりもかなり小さい．
（これが一番の利点）

以上のようになりますが，各タスク（仕事）がデッドラインを持つ（＝リアルタイムタスク）
ことが前提条件になりますので，それ以外の土俵でのスケジューリングには適用できません．
（自動車制御，ロボット制御などのリアルタイムシステムでは，リアルタイムタスクが実行されます．）


スケジューリングを一つのコアで集中して行うことを前提としているため，
既存の手法よりもオーバーヘッド（スケジューリングを行う時間）が小さい
といえども，他のコアはその間ストップしてしまうことが問題です．
スケジューリング専用ハードウェアを導入して，コアではなくハードウェアで
スケジューリングを行うことが効果的かもしれません．（新規性その１）

また，スケジューリングに必要な情報の多くはシステム稼働前に得られるため
（特に各タスクの起動タイミングは既知），オンタイムでスケジューリングを
行うのではなく，事前にいずれかのコアがアイドルになったときに，そのコア
でスケジューリングを行うことができそうです．（新規性その２）



ここ数十年、リアルタイム組み込みシステムにおけるマルチプロセッサアーキテクチャの普及が認識されています。
このようなシステムにおけるリアルタイムタスクのスケジューリングは、その結果困難な問題となっています。
このホワイト ペーパーでは、タスクの総使用率が関係するシステムの容量を超えない場合に、期限を逃さない
タスクセットをスケジュールできる最適なスケジューリングアルゴリズムを紹介します。
LLA と呼ばれる提案されたアルゴリズムは、2 つの連続したジョブリリース間の期間として定義される、
各時間間隔に対して、いわゆる固定タスク・スケジューリング・プランを導入します。
各間隔の開始時に、LAAは、タスクの要求された実行時間を間隔内に予測し、スケジューリングの要件を適切に満たす
プロセッサにこれらの量を配置することによって、スケジューリング計画を立てます。
このアプローチにより、LAA はスケジューラー呼び出しの数をジョブ・リリースの数まで大幅に減らすことができます。
さらに、シミュレーション結果は、既存の最適なスケジューリングアルゴリズムに対する競合性、タスクプリエンプション、
タスク移行を維持しながら、アルゴリズムの時間複雑性が低いということを示しています。


マルチコアプロセッサはコアが二つある。コアは一つのことしかできないがコアが二つ
あることで並列に実行することができるようになる。

ハードウェアアクセラれーら：なんらかの機能を通常の汎用プロセッサ (CPU) 上で動作するソフトウェア
　　　　　　　　　　　　　（コンピュータ・プログラム）による実装で処理したのではレイテンシや
　　　　　　　　　　　　　スループットが遅い、消費電力が大きい、などといった問題があるような場合に、
　　　　　　　　　　　　　ハードウェア実装による支援で実行速度などを加速（アクセラレーション）し、
　　　　　　　　　　　　　システム全体の性能や効率を向上させる技術である。